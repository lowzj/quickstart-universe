name: Python CI

on:
  push:
    branches: [ "main", "master" ] # Adjust if your main branch has a different name
  pull_request:
    branches: [ "main", "master" ] # Adjust if your main branch has a different name

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"] # Test against multiple Python versions

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        pip install uv

    - name: Create virtual environment and install dependencies
      run: |
        uv venv --python ${{ matrix.python-version }} # Specify Python version for venv
        uv pip sync pyproject.toml
      # Note: The source .venv/bin/activate is not strictly needed here if using `uv run` for subsequent commands,
      # but if running commands directly, activation or full path to executables in .venv/bin might be needed.
      # For simplicity, we'll assume `uv run` handles the environment.

    - name: Install Ruff for linting
      run: |
        uv pip install ruff # Explicitly install ruff

    - name: Lint with Ruff
      run: |
        .venv/bin/ruff check . # Call ruff directly from the venv

    - name: Test with unittest
      run: |
        uv run python -m unittest discover -s tests -p "test_*.py"
